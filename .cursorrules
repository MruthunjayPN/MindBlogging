You are an expert in TypeScript, Node.js, Express, React,React-router-dom , Vite, TanStack Query, TanStack Router, and Tailwind.

Tech Stack:
Use typescript
Backend: Node.js with Express.js  
Database: postgresql with prisma ORM
Frontend: React.js 
Authentication: JSON Web Tokens (JWT)  
Version Control: Git  
Deployment: Docker (optional)  


Strategy: 

Summarize the pick submission process and outline the API endpoint and business logic in pseudocode before coding.  

Strategic Planning with Pseudocode:

Begin each feature with detailed pseudocode.  
Example: Provide pseudocode for the weekly scoring process, detailing steps from game result input to entry status updates.  

Code Quality:

Ensure secure, efficient code following RESTful API best practices.  
Implement proper error handling and input validation.  

Response Constraints
- Do not remove any existing code unless necessary.
- Do not remove my comments or commented-out code unless necessary.
- Do not change the formatting of my imports.
- Do not change the formatting of my code unless important for new functionality.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Use curly braces for all conditionals. Favor simplicity over cleverness.
- Use declarative JSX.

UI and Styling
- Use Tailwind for components and styling.
- Use Shadcn + Magic UI for building components

Performance Optimization
- Look for ways to make things faster:
  - Use immutable data structures
  - Use efficient data fetching strategies
  - Optimize network requests
  - Use efficient data structures
  - Use efficient algorithms
  - Use efficient rendering strategies
  - Use efficient state management


# Cursor Rules File for Blogging Site

# User Authentication
use jwt token for auth and create necesary middlewares
auth:
  - register:
      method: POST
      endpoint: /api/auth/signup
      description: "Register a new user"
  - login:
      method: POST
      endpoint: /api/auth/signin
      description: "Authenticate a user and return a token"
  - logout:
      method: POST
      endpoint: /api/auth/logout
      description: "Logout the user"
  - refreshToken:
      method: POST
      endpoint: /api/auth/refresh-token
      description: "Refresh authentication token"

# User Flow
user:
  - getProfile:
      method: GET
      endpoint: /api/user/profilePosts
      description: "Retrieve user profile and blog details . it should have personal details and all the blogs created by the specific user"
  - updateProfile:
      method: PUT
      endpoint: /api/user/profile
      description: "Update user profile details"
  - deleteUser:
      method: DELETE
      endpoint: /api/user
      description: "Delete a user account"

# Blog Flow
blog:
  - createPost:
      method: POST
      endpoint: /api/blog/posts
      description: "Create a new blog post"
  - getPosts:
      method: GET
      endpoint: /api/blog/posts
      description: "Get all blog posts"
  - getPost:
      method: GET
      endpoint: /api/blog/posts/:id
      description: "Get a specific blog post by ID"
  - updatePost:
      method: PUT
      endpoint: /api/blog/posts/:id
      description: "Update a blog post"
  - deletePost:
      method: DELETE
      endpoint: /api/blog/posts/:id
      description: "Delete a blog post"

# Admin Flow
admin:
  - getAllUsers:
      method: GET
      endpoint: /api/admin/users
      description: "Retrieve all users (Admin Only)"
  - deleteUser:
      method: DELETE
      endpoint: /api/admin/users/:id
      description: "Delete a user (Admin Only)"
